[tox]
# These environments will be run when "tox" is invoked. A specific environment
# can be run with e.g., tox -e lint
envlist =
  lint,
  lint-format,
  types,
{%- if cookiecutter.library == "y" %}
# It is good practice to test the library for all supported versions.
{%- for version in range(cookiecutter.min_python | replace('3.', '') | int, 13) %}
  py3{{ version }}{{ "," if not loop.last else "" }}
{%- endfor %}
{%- else %}
  py3{{ cookiecutter.min_python | replace('3.', '') }}
{%- endif %}
min_version = 4.0

[testenv]
# Run pytest and measure coverage.
{% if cookiecutter.service == "y" %}
deps = -r{toxinidir}/requirements/requirements-{envname}-dev.txt
{%- else %}
extras = test
{% endif %}
commands =
  pytest --cov={{ cookiecutter.module_name }} --cov-report=xml

[testenv:lint]
# Run the linter for both src and tests folders.
basepython = python{{ cookiecutter.min_python }}
{%- if cookiecutter.service == "y" %}
deps = -r{toxinidir}/requirements/requirements-py{{ cookiecutter.min_python | replace ('.', '') }}-dev.txt
{%- else %}
extras = lint, test
{%- endif %}
commands =
  pylint {toxinidir}/src/{{ cookiecutter.module_name }} {toxinidir}/tests

[testenv:lint-format]
# Check the code format by running black and isort in check mode.
basepython = python{{ cookiecutter.min_python }}
{%- if cookiecutter.service == "y" %}
deps = -r{toxinidir}/requirements/requirements-py{{ cookiecutter.min_python | replace ('.', '') }}-dev.txt
{%- else %}
extras = format, test
{%- endif %}
commands =
  black --diff --check {toxinidir}
  isort --diff --check-only {toxinidir}

[testenv:types]
# Run mypy linter. Mypy needs to be run in src and tests separately to not
# cause errors with imports.
basepython = python{{ cookiecutter.min_python }}
{%- if cookiecutter.service == "y" %}
deps = -r{toxinidir}/requirements/requirements-py{{ cookiecutter.min_python | replace ('.', '') }}-dev.txt
{%- else %}
extras = types, test
{%- endif %}
commands =
  mypy {toxinidir}/src
  mypy {toxinidir}/tests

[testenv:format]
# Applies the formatting from black and isort. Not run by default when invoking
# tox but provides an easy way to fix format errors. Run with tox -e format
basepython = python{{ cookiecutter.min_python }}
{%- if cookiecutter.service == "y" %}
deps = -r{toxinidir}/requirements/requirements-py{{ cookiecutter.min_python | replace ('.', '') }}-dev.txt
{%- else %}
extras = format, test
{%- endif %}
commands =
  black {toxinidir}
  isort {toxinidir}

{% if cookiecutter.service == "y" -%}
{% if cookiecutter.library == "y" -%}
[testenv:requirements-py{ {%- for version in range(cookiecutter.min_python | replace('3.', '') | int, 13) %}3{{ version }}{{ "," if not loop.last else "" }}{%- endfor -%} }]
{% else -%}
[testenv:requirements-py{ {{- cookiecutter.min_python | replace('.', '') -}} }]
{% endif -%}
; Generate new requirements files
; only run this on linux as compiled requirements are platform dependent and
; this code is deployed in linux containers.
; Would be better to only run this on a specific processor architecture, but
; this is not supported in tox at the moment.
labels = requirements
platform = linux
deps = pip-tools
skip_install = true
setenv =
  ; will show `tox run -m requirements` in the top of the generated files.
  CUSTOM_COMPILE_COMMAND='tox run -m requirements'
commands =
; ensure that the requirements-folder exists
  python3 -c 'import pathlib;pathlib.Path("requirements").mkdir(exist_ok=True)'
; explanation of flags used
; --upgrade: upgrade all dependencies to latest version. normally pip-compile
;   change as little as possible, but without constraints it means that
;   it will never update transitive dependencies.
; --resolver backtracking: use the "new" improved backtracking resolver from
;   pip. this will be default in pip-tools 7.
; --allow-unsafe: allow the "unsafe" packages, which will be default behaviour
;   in upcoming pip-tools version.
  pip-compile --upgrade --generate-hashes --resolver backtracking --allow-unsafe pyproject.toml --output-file requirements/{envname}.txt
  pip-compile --extra format,lint,types,test --upgrade --generate-hashes --resolver backtracking --allow-unsafe pyproject.toml --output-file requirements/{envname}-dev.txt
{% endif -%}
